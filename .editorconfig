# https://editorconfig.org/
[*]
charset = utf-8
end_of_line = lf
indent_style = tab
indent_size = 4
trim_trailing_whitespace = true
insert_final_newline = true


# The variables prefixed `dotnet_` or `csharp_` is Visual Studio .NET coding conversation extension.
# See https://docs.microsoft.com/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]
##############################################################################################
# Coding Style
##############################################################################################

# Must not use `this` keyword; must rename local variable if instance variables were hidden.
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

# Use keywords for builtin types.
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Must use accessibility modifiers aligned with the fixed order.
dotnet_style_require_accessibility_modifiers = true:error
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error

# Should use `readonly` keyword as possible.
dotnet_style_readonly_field = false:suggestion

# Should omit `(` and `)` for the operators if unnecessary.
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:suggestion
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:suggestion

# Should use a initializer list as possible.
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion

# Should use tuple names rather then Item***.
dotnet_style_explicit_tuple_names = true:suggestion

# Should use implicit names as possible.
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion

# Should use auto property as possible but Unity inspector does not find one.
dotnet_style_prefer_auto_properties = true:suggestion

# Should use `*** is null` rather then `object.ReferenceEquals(***, null)` as possible.
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

# Should use condition expression as possible.
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion

# Should use +=, -=, *=, /=, ... as possible.
dotnet_style_prefer_compound_assignment = true:suggestion

# Sometimes `??` and `?.` cause strange behaviour because of UnityEngine.Object does not support them.
dotnet_style_coalesce_expression = false:none
dotnet_style_null_propagation = false:none

# Declare variable type for builtin explicitly.
csharp_style_var_for_built_in_types = true:warning

# Should use right-hand type inference as possible.
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

# Should use => body as possible.
csharp_style_expression_bodied_methods = true:suggestion
csharp_style_expression_bodied_constructors = true:suggestion
csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = true:suggestion

# Use pattern matching.
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_pattern_matching_over_as_with_null_check = true:warning

# Use inlined declarations.
csharp_style_inlined_variable_declaration = true:warning

# Use simple default expression.
csharp_prefer_simple_default_expression = true:warning

# Should use throw "expression" instead of throw "statement" as possible.
csharp_style_throw_expression = true:suggestion

# Use `<delegate>?.Invoke(...)` instead of null check.
csharp_style_conditional_delegate_call = true:warning

# Do not omit `{` and `}` even if one line body.
csharp_prefer_braces = true:warning

# Use discard.
csharp_style_unused_value_expression_statement_preference = discard_variable:warning
csharp_style_unused_value_assignment_preference = discard_variable:warning

# Should use deconstructed variable declaration as possible.
csharp_style_deconstructed_variable_declaration = true:suggestion

# Should use local functions instead of anonymouse functions as possible.
csharp_style_pattern_local_over_anonymous_function = true:suggestion

# Must place using directive on outside `namespace` block.
csharp_using_directive_placement = outside_namespace:error

# Any accessibility method should not have unused parameters.
dotnet_code_quality_unused_parameters = all:suggestion

# ------------------------------------------------------------------
# TODO: Uncomment following lines if Unity supports C# 8.0 or above.
# ------------------------------------------------------------------

# Use `^` and `..` operator for a collection.
# csharp_style_prefer_index_operator = true:warning
# csharp_style_prefer_range_operator = true:warning

# Use local static function.
# csharp_prefer_static_local_function = true:warning

# Use simple using statement.
# csharp_prefer_simple_using_statement = true:warning

# Should use `switch` expression as possible.
# csharp_style_prefer_switch_expression = true:suggestion

# ------------------------------------------------------------------
# END OF TODO
# ------------------------------------------------------------------

##############################################################################################
# Coding Format
##############################################################################################

# Place `using System.*` first.
dotnet_sort_system_directives_first = true

# Allow `using` directive to categolize.
dotnet_separate_import_directive_groups = true

# Place a line break before `{`.
csharp_new_line_before_open_brace = all

# Place a line break before `else`, `catch`, `finally`.
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true

# Separate members of an initializer by a line break.
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true

# Separate elements of query expression clauses by a line break.
csharp_new_line_between_query_expression_clauses = true

# `case` of switch indentation.
csharp_indent_switch_labels = false
csharp_indent_case_contents = true

# `goto` label indentation.
csharp_indent_labels = one_less_than_current

# Block indentation.
csharp_indent_braces = false
csharp_indent_block_contents = true
csharp_indent_case_contents_when_block = false

# Do not place spaces after a type cast.
csharp_space_after_cast = false

# Place a space after a keyword in control flow statements.
csharp_space_after_keywords_in_control_flow_statements = true

# Do not place spaces between control flow statement, expression, type casts.
csharp_space_between_parentheses = false

# Place spaces around `:` of inheritance clause.
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true

# Place a space around binary operators.
csharp_space_around_binary_operators = before_and_after

# Do not place spaces around method parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Do not place spaces between a method name and its parameter list.
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_name_and_opening_parenthesis = false

# Place a space after `,` but not before.
csharp_space_after_comma = true
csharp_space_before_comma = false

# Do not place spaces around `.`.
csharp_space_after_dot = false
csharp_space_before_dot = false

# Place a space after `;` in `for` statements, but not before.
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false

# Remove extra spaces in declaration statements.
csharp_space_around_declaration_statements = false

# Remove spaces before `[]` and between `[` and `]`
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false

# Disallow to place any statements on same line.
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = false

##############################################################################################
# Naming
##############################################################################################

# Define rules.
dotnet_naming_rule.namespaces_must_be_PascalCase = namespace_symbols
dotnet_naming_rule.namespaces_must_be_PascalCase.style = pascal_case_style
dotnet_naming_rule.namespaces_must_be_PascalCase.severity = error

dotnet_naming_rule.type_names_must_be_PascalCase = type_name_symbols
dotnet_naming_rule.type_names_must_be_PascalCase.style = pascal_case_style
dotnet_naming_rule.type_names_must_be_PascalCase.severity = error

dotnet_naming_rule.public_members_must_be_PascalCase = public_member_symbols
dotnet_naming_rule.public_members_must_be_PascalCase.style = pascal_case_style
dotnet_naming_rule.public_members_must_be_PascalCase.severity = error

dotnet_naming_rule.non_public_protocol_elements_should_be_PascalCase = non_public_protocol_element_symbols
dotnet_naming_rule.non_public_protocol_elements_should_be_PascalCase.style = pascal_case_style
dotnet_naming_rule.non_public_protocol_elements_should_be_PascalCase.severity = warning

dotnet_naming_rule.non_public_fields_should_be_underscore_lowerCamelCase = non_public_fields_symbols
dotnet_naming_rule.non_public_fields_should_be_underscore_lowerCamelCase.style = underscore_cammel_case
dotnet_naming_rule.non_public_fields_should_be_underscore_lowerCamelCase.severity = warning

# Define naming symbols.
dotnet_naming_symbols.namespace_symbols.applicable_kinds = namespace
dotnet_naming_symbols.namespace_symbols.applicable_accessibilities = *

dotnet_naming_symbols.type_name_symbols.applicable_kinds = class,struct,interface,enum
dotnet_naming_symbols.type_name_symbols.applicable_accessibilities = *


dotnet_naming_symbols.public_member_symbols.applicable_kinds = property,method,field,event,delegate
dotnet_naming_symbols.public_member_symbols.applicable_accessibilities = public

dotnet_naming_symbols.non_public_protocol_element_symbols.applicable_kinds = property,method,delegate
dotnet_naming_symbols.non_public_protocol_element_symbols.applicable_accessibilities = internal,protected,protected_internal,private_protected,private

dotnet_naming_symbols.non_public_fields_symbols.applicable_kinds = field,event
dotnet_naming_symbols.non_public_fields_symbols.applicable_accessibilities = internal,protected,protected_internal,private_protected,private

# Define naming styles.
dotnet_naming_style.pascal_case_style.capitalization = first_word_upper

dotnet_naming_style.underscore_cammel_case.capitalization = camel_case
dotnet_naming_style.underscore_cammel_case.required_prefix = _

